// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: matchmaking.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QueuePlayerResponse_StatusCode int32

const (
	QueuePlayerResponse_SUCCESS          QueuePlayerResponse_StatusCode = 0
	QueuePlayerResponse_FAILURE          QueuePlayerResponse_StatusCode = 1
	QueuePlayerResponse_ALREADY_IN_QUEUE QueuePlayerResponse_StatusCode = 2
)

// Enum value maps for QueuePlayerResponse_StatusCode.
var (
	QueuePlayerResponse_StatusCode_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE",
		2: "ALREADY_IN_QUEUE",
	}
	QueuePlayerResponse_StatusCode_value = map[string]int32{
		"SUCCESS":          0,
		"FAILURE":          1,
		"ALREADY_IN_QUEUE": 2,
	}
)

func (x QueuePlayerResponse_StatusCode) Enum() *QueuePlayerResponse_StatusCode {
	p := new(QueuePlayerResponse_StatusCode)
	*p = x
	return p
}

func (x QueuePlayerResponse_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueuePlayerResponse_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[0].Descriptor()
}

func (QueuePlayerResponse_StatusCode) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[0]
}

func (x QueuePlayerResponse_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueuePlayerResponse_StatusCode.Descriptor instead.
func (QueuePlayerResponse_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{3, 0}
}

type ServerStatusUpdateResponse_StatusCode int32

const (
	ServerStatusUpdateResponse_OK ServerStatusUpdateResponse_StatusCode = 0
)

// Enum value maps for ServerStatusUpdateResponse_StatusCode.
var (
	ServerStatusUpdateResponse_StatusCode_name = map[int32]string{
		0: "OK",
	}
	ServerStatusUpdateResponse_StatusCode_value = map[string]int32{
		"OK": 0,
	}
)

func (x ServerStatusUpdateResponse_StatusCode) Enum() *ServerStatusUpdateResponse_StatusCode {
	p := new(ServerStatusUpdateResponse_StatusCode)
	*p = x
	return p
}

func (x ServerStatusUpdateResponse_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServerStatusUpdateResponse_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[1].Descriptor()
}

func (ServerStatusUpdateResponse_StatusCode) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[1]
}

func (x ServerStatusUpdateResponse_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServerStatusUpdateResponse_StatusCode.Descriptor instead.
func (ServerStatusUpdateResponse_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{8, 0}
}

type AssignMatchResponse_StatusCode int32

const (
	AssignMatchResponse_ACCEPTED      AssignMatchResponse_StatusCode = 0
	AssignMatchResponse_REJECTED_BUSY AssignMatchResponse_StatusCode = 1
)

// Enum value maps for AssignMatchResponse_StatusCode.
var (
	AssignMatchResponse_StatusCode_name = map[int32]string{
		0: "ACCEPTED",
		1: "REJECTED_BUSY",
	}
	AssignMatchResponse_StatusCode_value = map[string]int32{
		"ACCEPTED":      0,
		"REJECTED_BUSY": 1,
	}
)

func (x AssignMatchResponse_StatusCode) Enum() *AssignMatchResponse_StatusCode {
	p := new(AssignMatchResponse_StatusCode)
	*p = x
	return p
}

func (x AssignMatchResponse_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssignMatchResponse_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaking_proto_enumTypes[2].Descriptor()
}

func (AssignMatchResponse_StatusCode) Type() protoreflect.EnumType {
	return &file_matchmaking_proto_enumTypes[2]
}

func (x AssignMatchResponse_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssignMatchResponse_StatusCode.Descriptor instead.
func (AssignMatchResponse_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{10, 0}
}

// Mensajes Generales
type PlayerIdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      string                 `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerIdRequest) Reset() {
	*x = PlayerIdRequest{}
	mi := &file_matchmaking_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerIdRequest) ProtoMessage() {}

func (x *PlayerIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerIdRequest.ProtoReflect.Descriptor instead.
func (*PlayerIdRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{0}
}

func (x *PlayerIdRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

type LeaveQueueResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	VectorClock   []int32                `protobuf:"varint,2,rep,packed,name=vector_clock,json=vectorClock,proto3" json:"vector_clock,omitempty"` // Reloj actualizado del Matchmaker
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeaveQueueResponse) Reset() {
	*x = LeaveQueueResponse{}
	mi := &file_matchmaking_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaveQueueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveQueueResponse) ProtoMessage() {}

func (x *LeaveQueueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveQueueResponse.ProtoReflect.Descriptor instead.
func (*LeaveQueueResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{1}
}

func (x *LeaveQueueResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LeaveQueueResponse) GetVectorClock() []int32 {
	if x != nil {
		return x.VectorClock
	}
	return nil
}

type QueuePlayerRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	PlayerId           string                 `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	GameModePreference string                 `protobuf:"bytes,2,opt,name=game_mode_preference,json=gameModePreference,proto3" json:"game_mode_preference,omitempty"` // ej: "1v1"
	VectorClock        []int32                `protobuf:"varint,3,rep,packed,name=vector_clock,json=vectorClock,proto3" json:"vector_clock,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *QueuePlayerRequest) Reset() {
	*x = QueuePlayerRequest{}
	mi := &file_matchmaking_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueuePlayerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuePlayerRequest) ProtoMessage() {}

func (x *QueuePlayerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueuePlayerRequest.ProtoReflect.Descriptor instead.
func (*QueuePlayerRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{2}
}

func (x *QueuePlayerRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *QueuePlayerRequest) GetGameModePreference() string {
	if x != nil {
		return x.GameModePreference
	}
	return ""
}

func (x *QueuePlayerRequest) GetVectorClock() []int32 {
	if x != nil {
		return x.VectorClock
	}
	return nil
}

type QueuePlayerResponse struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	StatusCode    QueuePlayerResponse_StatusCode `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3,enum=matchmaking.QueuePlayerResponse_StatusCode" json:"status_code,omitempty"`
	Message       string                         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	VectorClock   []int32                        `protobuf:"varint,3,rep,packed,name=vector_clock,json=vectorClock,proto3" json:"vector_clock,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueuePlayerResponse) Reset() {
	*x = QueuePlayerResponse{}
	mi := &file_matchmaking_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueuePlayerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuePlayerResponse) ProtoMessage() {}

func (x *QueuePlayerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueuePlayerResponse.ProtoReflect.Descriptor instead.
func (*QueuePlayerResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{3}
}

func (x *QueuePlayerResponse) GetStatusCode() QueuePlayerResponse_StatusCode {
	if x != nil {
		return x.StatusCode
	}
	return QueuePlayerResponse_SUCCESS
}

func (x *QueuePlayerResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueuePlayerResponse) GetVectorClock() []int32 {
	if x != nil {
		return x.VectorClock
	}
	return nil
}

type PlayerStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      string                 `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	VectorClock   []int32                `protobuf:"varint,2,rep,packed,name=vector_clock,json=vectorClock,proto3" json:"vector_clock,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerStatusRequest) Reset() {
	*x = PlayerStatusRequest{}
	mi := &file_matchmaking_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerStatusRequest) ProtoMessage() {}

func (x *PlayerStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerStatusRequest.ProtoReflect.Descriptor instead.
func (*PlayerStatusRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{4}
}

func (x *PlayerStatusRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *PlayerStatusRequest) GetVectorClock() []int32 {
	if x != nil {
		return x.VectorClock
	}
	return nil
}

type PlayerStatusResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	PlayerStatus      string                 `protobuf:"bytes,1,opt,name=player_status,json=playerStatus,proto3" json:"player_status,omitempty"`
	MatchId           string                 `protobuf:"bytes,2,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	GameServerAddress string                 `protobuf:"bytes,3,opt,name=game_server_address,json=gameServerAddress,proto3" json:"game_server_address,omitempty"`
	VectorClock       []int32                `protobuf:"varint,4,rep,packed,name=vector_clock,json=vectorClock,proto3" json:"vector_clock,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *PlayerStatusResponse) Reset() {
	*x = PlayerStatusResponse{}
	mi := &file_matchmaking_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerStatusResponse) ProtoMessage() {}

func (x *PlayerStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerStatusResponse.ProtoReflect.Descriptor instead.
func (*PlayerStatusResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{5}
}

func (x *PlayerStatusResponse) GetPlayerStatus() string {
	if x != nil {
		return x.PlayerStatus
	}
	return ""
}

func (x *PlayerStatusResponse) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *PlayerStatusResponse) GetGameServerAddress() string {
	if x != nil {
		return x.GameServerAddress
	}
	return ""
}

func (x *PlayerStatusResponse) GetVectorClock() []int32 {
	if x != nil {
		return x.VectorClock
	}
	return nil
}

type MatchNotification struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	MatchId           string                 `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	GameServerAddress string                 `protobuf:"bytes,2,opt,name=game_server_address,json=gameServerAddress,proto3" json:"game_server_address,omitempty"`
	PlayerIds         []string               `protobuf:"bytes,3,rep,name=player_ids,json=playerIds,proto3" json:"player_ids,omitempty"`
	VectorClock       []int32                `protobuf:"varint,4,rep,packed,name=vector_clock,json=vectorClock,proto3" json:"vector_clock,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MatchNotification) Reset() {
	*x = MatchNotification{}
	mi := &file_matchmaking_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchNotification) ProtoMessage() {}

func (x *MatchNotification) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchNotification.ProtoReflect.Descriptor instead.
func (*MatchNotification) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{6}
}

func (x *MatchNotification) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *MatchNotification) GetGameServerAddress() string {
	if x != nil {
		return x.GameServerAddress
	}
	return ""
}

func (x *MatchNotification) GetPlayerIds() []string {
	if x != nil {
		return x.PlayerIds
	}
	return nil
}

func (x *MatchNotification) GetVectorClock() []int32 {
	if x != nil {
		return x.VectorClock
	}
	return nil
}

type ServerStatusUpdateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServerId      string                 `protobuf:"bytes,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	NewStatus     string                 `protobuf:"bytes,2,opt,name=new_status,json=newStatus,proto3" json:"new_status,omitempty"`
	Address       string                 `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	VectorClock   []int32                `protobuf:"varint,4,rep,packed,name=vector_clock,json=vectorClock,proto3" json:"vector_clock,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServerStatusUpdateRequest) Reset() {
	*x = ServerStatusUpdateRequest{}
	mi := &file_matchmaking_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerStatusUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerStatusUpdateRequest) ProtoMessage() {}

func (x *ServerStatusUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerStatusUpdateRequest.ProtoReflect.Descriptor instead.
func (*ServerStatusUpdateRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{7}
}

func (x *ServerStatusUpdateRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *ServerStatusUpdateRequest) GetNewStatus() string {
	if x != nil {
		return x.NewStatus
	}
	return ""
}

func (x *ServerStatusUpdateRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ServerStatusUpdateRequest) GetVectorClock() []int32 {
	if x != nil {
		return x.VectorClock
	}
	return nil
}

type ServerStatusUpdateResponse struct {
	state         protoimpl.MessageState                `protogen:"open.v1"`
	StatusCode    ServerStatusUpdateResponse_StatusCode `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3,enum=matchmaking.ServerStatusUpdateResponse_StatusCode" json:"status_code,omitempty"`
	VectorClock   []int32                               `protobuf:"varint,2,rep,packed,name=vector_clock,json=vectorClock,proto3" json:"vector_clock,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServerStatusUpdateResponse) Reset() {
	*x = ServerStatusUpdateResponse{}
	mi := &file_matchmaking_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerStatusUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerStatusUpdateResponse) ProtoMessage() {}

func (x *ServerStatusUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerStatusUpdateResponse.ProtoReflect.Descriptor instead.
func (*ServerStatusUpdateResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{8}
}

func (x *ServerStatusUpdateResponse) GetStatusCode() ServerStatusUpdateResponse_StatusCode {
	if x != nil {
		return x.StatusCode
	}
	return ServerStatusUpdateResponse_OK
}

func (x *ServerStatusUpdateResponse) GetVectorClock() []int32 {
	if x != nil {
		return x.VectorClock
	}
	return nil
}

type AssignMatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchId       string                 `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	PlayerIds     []string               `protobuf:"bytes,2,rep,name=player_ids,json=playerIds,proto3" json:"player_ids,omitempty"`
	VectorClock   []int32                `protobuf:"varint,3,rep,packed,name=vector_clock,json=vectorClock,proto3" json:"vector_clock,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignMatchRequest) Reset() {
	*x = AssignMatchRequest{}
	mi := &file_matchmaking_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignMatchRequest) ProtoMessage() {}

func (x *AssignMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignMatchRequest.ProtoReflect.Descriptor instead.
func (*AssignMatchRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{9}
}

func (x *AssignMatchRequest) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *AssignMatchRequest) GetPlayerIds() []string {
	if x != nil {
		return x.PlayerIds
	}
	return nil
}

func (x *AssignMatchRequest) GetVectorClock() []int32 {
	if x != nil {
		return x.VectorClock
	}
	return nil
}

type AssignMatchResponse struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	StatusCode    AssignMatchResponse_StatusCode `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3,enum=matchmaking.AssignMatchResponse_StatusCode" json:"status_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignMatchResponse) Reset() {
	*x = AssignMatchResponse{}
	mi := &file_matchmaking_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignMatchResponse) ProtoMessage() {}

func (x *AssignMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignMatchResponse.ProtoReflect.Descriptor instead.
func (*AssignMatchResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{10}
}

func (x *AssignMatchResponse) GetStatusCode() AssignMatchResponse_StatusCode {
	if x != nil {
		return x.StatusCode
	}
	return AssignMatchResponse_ACCEPTED
}

type AdminRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdminRequest) Reset() {
	*x = AdminRequest{}
	mi := &file_matchmaking_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminRequest) ProtoMessage() {}

func (x *AdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminRequest.ProtoReflect.Descriptor instead.
func (*AdminRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{11}
}

type SystemStatusResponse struct {
	state         protoimpl.MessageState                   `protogen:"open.v1"`
	Servers       []*SystemStatusResponse_ServerState      `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
	PlayerQueue   []*SystemStatusResponse_PlayerQueueEntry `protobuf:"bytes,2,rep,name=player_queue,json=playerQueue,proto3" json:"player_queue,omitempty"`
	VectorClock   []int32                                  `protobuf:"varint,3,rep,packed,name=vector_clock,json=vectorClock,proto3" json:"vector_clock,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SystemStatusResponse) Reset() {
	*x = SystemStatusResponse{}
	mi := &file_matchmaking_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemStatusResponse) ProtoMessage() {}

func (x *SystemStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemStatusResponse.ProtoReflect.Descriptor instead.
func (*SystemStatusResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{12}
}

func (x *SystemStatusResponse) GetServers() []*SystemStatusResponse_ServerState {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *SystemStatusResponse) GetPlayerQueue() []*SystemStatusResponse_PlayerQueueEntry {
	if x != nil {
		return x.PlayerQueue
	}
	return nil
}

func (x *SystemStatusResponse) GetVectorClock() []int32 {
	if x != nil {
		return x.VectorClock
	}
	return nil
}

type AdminServerUpdateRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ServerId        string                 `protobuf:"bytes,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	NewForcedStatus string                 `protobuf:"bytes,2,opt,name=new_forced_status,json=newForcedStatus,proto3" json:"new_forced_status,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AdminServerUpdateRequest) Reset() {
	*x = AdminServerUpdateRequest{}
	mi := &file_matchmaking_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminServerUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminServerUpdateRequest) ProtoMessage() {}

func (x *AdminServerUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminServerUpdateRequest.ProtoReflect.Descriptor instead.
func (*AdminServerUpdateRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{13}
}

func (x *AdminServerUpdateRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *AdminServerUpdateRequest) GetNewForcedStatus() string {
	if x != nil {
		return x.NewForcedStatus
	}
	return ""
}

type AdminUpdateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdminUpdateResponse) Reset() {
	*x = AdminUpdateResponse{}
	mi := &file_matchmaking_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminUpdateResponse) ProtoMessage() {}

func (x *AdminUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminUpdateResponse.ProtoReflect.Descriptor instead.
func (*AdminUpdateResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{14}
}

func (x *AdminUpdateResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type SystemStatusResponse_ServerState struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ServerId       string                 `protobuf:"bytes,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	Status         string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Address        string                 `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	CurrentMatchId string                 `protobuf:"bytes,4,opt,name=current_match_id,json=currentMatchId,proto3" json:"current_match_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SystemStatusResponse_ServerState) Reset() {
	*x = SystemStatusResponse_ServerState{}
	mi := &file_matchmaking_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemStatusResponse_ServerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemStatusResponse_ServerState) ProtoMessage() {}

func (x *SystemStatusResponse_ServerState) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemStatusResponse_ServerState.ProtoReflect.Descriptor instead.
func (*SystemStatusResponse_ServerState) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{12, 0}
}

func (x *SystemStatusResponse_ServerState) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *SystemStatusResponse_ServerState) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SystemStatusResponse_ServerState) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SystemStatusResponse_ServerState) GetCurrentMatchId() string {
	if x != nil {
		return x.CurrentMatchId
	}
	return ""
}

type SystemStatusResponse_PlayerQueueEntry struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	PlayerId           string                 `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	TimeInQueueSeconds int64                  `protobuf:"varint,2,opt,name=time_in_queue_seconds,json=timeInQueueSeconds,proto3" json:"time_in_queue_seconds,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SystemStatusResponse_PlayerQueueEntry) Reset() {
	*x = SystemStatusResponse_PlayerQueueEntry{}
	mi := &file_matchmaking_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemStatusResponse_PlayerQueueEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemStatusResponse_PlayerQueueEntry) ProtoMessage() {}

func (x *SystemStatusResponse_PlayerQueueEntry) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemStatusResponse_PlayerQueueEntry.ProtoReflect.Descriptor instead.
func (*SystemStatusResponse_PlayerQueueEntry) Descriptor() ([]byte, []int) {
	return file_matchmaking_proto_rawDescGZIP(), []int{12, 1}
}

func (x *SystemStatusResponse_PlayerQueueEntry) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *SystemStatusResponse_PlayerQueueEntry) GetTimeInQueueSeconds() int64 {
	if x != nil {
		return x.TimeInQueueSeconds
	}
	return 0
}

var File_matchmaking_proto protoreflect.FileDescriptor

const file_matchmaking_proto_rawDesc = "" +
	"\n" +
	"\x11matchmaking.proto\x12\vmatchmaking\".\n" +
	"\x0fPlayerIdRequest\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\tR\bplayerId\"Q\n" +
	"\x12LeaveQueueResponse\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\x12!\n" +
	"\fvector_clock\x18\x02 \x03(\x05R\vvectorClock\"\x86\x01\n" +
	"\x12QueuePlayerRequest\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\tR\bplayerId\x120\n" +
	"\x14game_mode_preference\x18\x02 \x01(\tR\x12gameModePreference\x12!\n" +
	"\fvector_clock\x18\x03 \x03(\x05R\vvectorClock\"\xde\x01\n" +
	"\x13QueuePlayerResponse\x12L\n" +
	"\vstatus_code\x18\x01 \x01(\x0e2+.matchmaking.QueuePlayerResponse.StatusCodeR\n" +
	"statusCode\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12!\n" +
	"\fvector_clock\x18\x03 \x03(\x05R\vvectorClock\"<\n" +
	"\n" +
	"StatusCode\x12\v\n" +
	"\aSUCCESS\x10\x00\x12\v\n" +
	"\aFAILURE\x10\x01\x12\x14\n" +
	"\x10ALREADY_IN_QUEUE\x10\x02\"U\n" +
	"\x13PlayerStatusRequest\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\tR\bplayerId\x12!\n" +
	"\fvector_clock\x18\x02 \x03(\x05R\vvectorClock\"\xa9\x01\n" +
	"\x14PlayerStatusResponse\x12#\n" +
	"\rplayer_status\x18\x01 \x01(\tR\fplayerStatus\x12\x19\n" +
	"\bmatch_id\x18\x02 \x01(\tR\amatchId\x12.\n" +
	"\x13game_server_address\x18\x03 \x01(\tR\x11gameServerAddress\x12!\n" +
	"\fvector_clock\x18\x04 \x03(\x05R\vvectorClock\"\xa0\x01\n" +
	"\x11MatchNotification\x12\x19\n" +
	"\bmatch_id\x18\x01 \x01(\tR\amatchId\x12.\n" +
	"\x13game_server_address\x18\x02 \x01(\tR\x11gameServerAddress\x12\x1d\n" +
	"\n" +
	"player_ids\x18\x03 \x03(\tR\tplayerIds\x12!\n" +
	"\fvector_clock\x18\x04 \x03(\x05R\vvectorClock\"\x94\x01\n" +
	"\x19ServerStatusUpdateRequest\x12\x1b\n" +
	"\tserver_id\x18\x01 \x01(\tR\bserverId\x12\x1d\n" +
	"\n" +
	"new_status\x18\x02 \x01(\tR\tnewStatus\x12\x18\n" +
	"\aaddress\x18\x03 \x01(\tR\aaddress\x12!\n" +
	"\fvector_clock\x18\x04 \x03(\x05R\vvectorClock\"\xaa\x01\n" +
	"\x1aServerStatusUpdateResponse\x12S\n" +
	"\vstatus_code\x18\x01 \x01(\x0e22.matchmaking.ServerStatusUpdateResponse.StatusCodeR\n" +
	"statusCode\x12!\n" +
	"\fvector_clock\x18\x02 \x03(\x05R\vvectorClock\"\x14\n" +
	"\n" +
	"StatusCode\x12\x06\n" +
	"\x02OK\x10\x00\"q\n" +
	"\x12AssignMatchRequest\x12\x19\n" +
	"\bmatch_id\x18\x01 \x01(\tR\amatchId\x12\x1d\n" +
	"\n" +
	"player_ids\x18\x02 \x03(\tR\tplayerIds\x12!\n" +
	"\fvector_clock\x18\x03 \x03(\x05R\vvectorClock\"\x92\x01\n" +
	"\x13AssignMatchResponse\x12L\n" +
	"\vstatus_code\x18\x01 \x01(\x0e2+.matchmaking.AssignMatchResponse.StatusCodeR\n" +
	"statusCode\"-\n" +
	"\n" +
	"StatusCode\x12\f\n" +
	"\bACCEPTED\x10\x00\x12\x11\n" +
	"\rREJECTED_BUSY\x10\x01\"\x0e\n" +
	"\fAdminRequest\"\xc6\x03\n" +
	"\x14SystemStatusResponse\x12G\n" +
	"\aservers\x18\x01 \x03(\v2-.matchmaking.SystemStatusResponse.ServerStateR\aservers\x12U\n" +
	"\fplayer_queue\x18\x02 \x03(\v22.matchmaking.SystemStatusResponse.PlayerQueueEntryR\vplayerQueue\x12!\n" +
	"\fvector_clock\x18\x03 \x03(\x05R\vvectorClock\x1a\x86\x01\n" +
	"\vServerState\x12\x1b\n" +
	"\tserver_id\x18\x01 \x01(\tR\bserverId\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x12\x18\n" +
	"\aaddress\x18\x03 \x01(\tR\aaddress\x12(\n" +
	"\x10current_match_id\x18\x04 \x01(\tR\x0ecurrentMatchId\x1ab\n" +
	"\x10PlayerQueueEntry\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\tR\bplayerId\x121\n" +
	"\x15time_in_queue_seconds\x18\x02 \x01(\x03R\x12timeInQueueSeconds\"c\n" +
	"\x18AdminServerUpdateRequest\x12\x1b\n" +
	"\tserver_id\x18\x01 \x01(\tR\bserverId\x12*\n" +
	"\x11new_forced_status\x18\x02 \x01(\tR\x0fnewForcedStatus\"/\n" +
	"\x13AdminUpdateResponse\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage2\x83\x05\n" +
	"\n" +
	"Matchmaker\x12P\n" +
	"\vQueuePlayer\x12\x1f.matchmaking.QueuePlayerRequest\x1a .matchmaking.QueuePlayerResponse\x12V\n" +
	"\x0fGetPlayerStatus\x12 .matchmaking.PlayerStatusRequest\x1a!.matchmaking.PlayerStatusResponse\x12O\n" +
	"\n" +
	"LeaveQueue\x12 .matchmaking.PlayerStatusRequest\x1a\x1f.matchmaking.LeaveQueueResponse\x12Z\n" +
	"\x18StreamMatchNotifications\x12\x1c.matchmaking.PlayerIdRequest\x1a\x1e.matchmaking.MatchNotification0\x01\x12e\n" +
	"\x12UpdateServerStatus\x12&.matchmaking.ServerStatusUpdateRequest\x1a'.matchmaking.ServerStatusUpdateResponse\x12T\n" +
	"\x14AdminGetSystemStatus\x12\x19.matchmaking.AdminRequest\x1a!.matchmaking.SystemStatusResponse\x12a\n" +
	"\x16AdminUpdateServerState\x12%.matchmaking.AdminServerUpdateRequest\x1a .matchmaking.AdminUpdateResponse2^\n" +
	"\n" +
	"GameServer\x12P\n" +
	"\vAssignMatch\x12\x1f.matchmaking.AssignMatchRequest\x1a .matchmaking.AssignMatchResponseB\x13Z\x11grpc-server/protob\x06proto3"

var (
	file_matchmaking_proto_rawDescOnce sync.Once
	file_matchmaking_proto_rawDescData []byte
)

func file_matchmaking_proto_rawDescGZIP() []byte {
	file_matchmaking_proto_rawDescOnce.Do(func() {
		file_matchmaking_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_matchmaking_proto_rawDesc), len(file_matchmaking_proto_rawDesc)))
	})
	return file_matchmaking_proto_rawDescData
}

var file_matchmaking_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_matchmaking_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_matchmaking_proto_goTypes = []any{
	(QueuePlayerResponse_StatusCode)(0),           // 0: matchmaking.QueuePlayerResponse.StatusCode
	(ServerStatusUpdateResponse_StatusCode)(0),    // 1: matchmaking.ServerStatusUpdateResponse.StatusCode
	(AssignMatchResponse_StatusCode)(0),           // 2: matchmaking.AssignMatchResponse.StatusCode
	(*PlayerIdRequest)(nil),                       // 3: matchmaking.PlayerIdRequest
	(*LeaveQueueResponse)(nil),                    // 4: matchmaking.LeaveQueueResponse
	(*QueuePlayerRequest)(nil),                    // 5: matchmaking.QueuePlayerRequest
	(*QueuePlayerResponse)(nil),                   // 6: matchmaking.QueuePlayerResponse
	(*PlayerStatusRequest)(nil),                   // 7: matchmaking.PlayerStatusRequest
	(*PlayerStatusResponse)(nil),                  // 8: matchmaking.PlayerStatusResponse
	(*MatchNotification)(nil),                     // 9: matchmaking.MatchNotification
	(*ServerStatusUpdateRequest)(nil),             // 10: matchmaking.ServerStatusUpdateRequest
	(*ServerStatusUpdateResponse)(nil),            // 11: matchmaking.ServerStatusUpdateResponse
	(*AssignMatchRequest)(nil),                    // 12: matchmaking.AssignMatchRequest
	(*AssignMatchResponse)(nil),                   // 13: matchmaking.AssignMatchResponse
	(*AdminRequest)(nil),                          // 14: matchmaking.AdminRequest
	(*SystemStatusResponse)(nil),                  // 15: matchmaking.SystemStatusResponse
	(*AdminServerUpdateRequest)(nil),              // 16: matchmaking.AdminServerUpdateRequest
	(*AdminUpdateResponse)(nil),                   // 17: matchmaking.AdminUpdateResponse
	(*SystemStatusResponse_ServerState)(nil),      // 18: matchmaking.SystemStatusResponse.ServerState
	(*SystemStatusResponse_PlayerQueueEntry)(nil), // 19: matchmaking.SystemStatusResponse.PlayerQueueEntry
}
var file_matchmaking_proto_depIdxs = []int32{
	0,  // 0: matchmaking.QueuePlayerResponse.status_code:type_name -> matchmaking.QueuePlayerResponse.StatusCode
	1,  // 1: matchmaking.ServerStatusUpdateResponse.status_code:type_name -> matchmaking.ServerStatusUpdateResponse.StatusCode
	2,  // 2: matchmaking.AssignMatchResponse.status_code:type_name -> matchmaking.AssignMatchResponse.StatusCode
	18, // 3: matchmaking.SystemStatusResponse.servers:type_name -> matchmaking.SystemStatusResponse.ServerState
	19, // 4: matchmaking.SystemStatusResponse.player_queue:type_name -> matchmaking.SystemStatusResponse.PlayerQueueEntry
	5,  // 5: matchmaking.Matchmaker.QueuePlayer:input_type -> matchmaking.QueuePlayerRequest
	7,  // 6: matchmaking.Matchmaker.GetPlayerStatus:input_type -> matchmaking.PlayerStatusRequest
	7,  // 7: matchmaking.Matchmaker.LeaveQueue:input_type -> matchmaking.PlayerStatusRequest
	3,  // 8: matchmaking.Matchmaker.StreamMatchNotifications:input_type -> matchmaking.PlayerIdRequest
	10, // 9: matchmaking.Matchmaker.UpdateServerStatus:input_type -> matchmaking.ServerStatusUpdateRequest
	14, // 10: matchmaking.Matchmaker.AdminGetSystemStatus:input_type -> matchmaking.AdminRequest
	16, // 11: matchmaking.Matchmaker.AdminUpdateServerState:input_type -> matchmaking.AdminServerUpdateRequest
	12, // 12: matchmaking.GameServer.AssignMatch:input_type -> matchmaking.AssignMatchRequest
	6,  // 13: matchmaking.Matchmaker.QueuePlayer:output_type -> matchmaking.QueuePlayerResponse
	8,  // 14: matchmaking.Matchmaker.GetPlayerStatus:output_type -> matchmaking.PlayerStatusResponse
	4,  // 15: matchmaking.Matchmaker.LeaveQueue:output_type -> matchmaking.LeaveQueueResponse
	9,  // 16: matchmaking.Matchmaker.StreamMatchNotifications:output_type -> matchmaking.MatchNotification
	11, // 17: matchmaking.Matchmaker.UpdateServerStatus:output_type -> matchmaking.ServerStatusUpdateResponse
	15, // 18: matchmaking.Matchmaker.AdminGetSystemStatus:output_type -> matchmaking.SystemStatusResponse
	17, // 19: matchmaking.Matchmaker.AdminUpdateServerState:output_type -> matchmaking.AdminUpdateResponse
	13, // 20: matchmaking.GameServer.AssignMatch:output_type -> matchmaking.AssignMatchResponse
	13, // [13:21] is the sub-list for method output_type
	5,  // [5:13] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_matchmaking_proto_init() }
func file_matchmaking_proto_init() {
	if File_matchmaking_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_matchmaking_proto_rawDesc), len(file_matchmaking_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_matchmaking_proto_goTypes,
		DependencyIndexes: file_matchmaking_proto_depIdxs,
		EnumInfos:         file_matchmaking_proto_enumTypes,
		MessageInfos:      file_matchmaking_proto_msgTypes,
	}.Build()
	File_matchmaking_proto = out.File
	file_matchmaking_proto_goTypes = nil
	file_matchmaking_proto_depIdxs = nil
}

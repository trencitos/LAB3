// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: matchmaking.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Matchmaker_QueuePlayer_FullMethodName              = "/matchmaking.Matchmaker/QueuePlayer"
	Matchmaker_GetPlayerStatus_FullMethodName          = "/matchmaking.Matchmaker/GetPlayerStatus"
	Matchmaker_StreamMatchNotifications_FullMethodName = "/matchmaking.Matchmaker/StreamMatchNotifications"
	Matchmaker_UpdateServerStatus_FullMethodName       = "/matchmaking.Matchmaker/UpdateServerStatus"
	Matchmaker_AdminGetSystemStatus_FullMethodName     = "/matchmaking.Matchmaker/AdminGetSystemStatus"
	Matchmaker_AdminUpdateServerState_FullMethodName   = "/matchmaking.Matchmaker/AdminUpdateServerState"
)

// MatchmakerClient is the client API for Matchmaker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatchmakerClient interface {
	// Un jugador solicita unirse a la cola de emparejamiento.
	QueuePlayer(ctx context.Context, in *QueuePlayerRequest, opts ...grpc.CallOption) (*QueuePlayerResponse, error)
	// Un jugador solicita su estado actual (IDLE, IN_QUEUE, IN_MATCH).
	GetPlayerStatus(ctx context.Context, in *PlayerStatusRequest, opts ...grpc.CallOption) (*PlayerStatusResponse, error)
	// Un jugador se suscribe para recibir notificaciones cuando se le asigne una partida.
	StreamMatchNotifications(ctx context.Context, in *PlayerIdRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MatchNotification], error)
	// MÉTODOS PARA SERVIDORES DE PARTIDA (Game Servers)
	// Un servidor de partida se registra o actualiza su estado (DISPONIBLE, OCUPADO).
	UpdateServerStatus(ctx context.Context, in *ServerStatusUpdateRequest, opts ...grpc.CallOption) (*ServerStatusUpdateResponse, error)
	// MÉTODOS PARA EL CLIENTE ADMINISTRADOR (Admin Client)
	// Un administrador solicita una vista completa del estado del sistema.
	AdminGetSystemStatus(ctx context.Context, in *AdminRequest, opts ...grpc.CallOption) (*SystemStatusResponse, error)
	// Un administrador fuerza el estado de un servidor (ej: para recuperarlo de un estado CAIDO).
	AdminUpdateServerState(ctx context.Context, in *AdminServerUpdateRequest, opts ...grpc.CallOption) (*AdminUpdateResponse, error)
}

type matchmakerClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchmakerClient(cc grpc.ClientConnInterface) MatchmakerClient {
	return &matchmakerClient{cc}
}

func (c *matchmakerClient) QueuePlayer(ctx context.Context, in *QueuePlayerRequest, opts ...grpc.CallOption) (*QueuePlayerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueuePlayerResponse)
	err := c.cc.Invoke(ctx, Matchmaker_QueuePlayer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakerClient) GetPlayerStatus(ctx context.Context, in *PlayerStatusRequest, opts ...grpc.CallOption) (*PlayerStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlayerStatusResponse)
	err := c.cc.Invoke(ctx, Matchmaker_GetPlayerStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakerClient) StreamMatchNotifications(ctx context.Context, in *PlayerIdRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MatchNotification], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Matchmaker_ServiceDesc.Streams[0], Matchmaker_StreamMatchNotifications_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PlayerIdRequest, MatchNotification]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Matchmaker_StreamMatchNotificationsClient = grpc.ServerStreamingClient[MatchNotification]

func (c *matchmakerClient) UpdateServerStatus(ctx context.Context, in *ServerStatusUpdateRequest, opts ...grpc.CallOption) (*ServerStatusUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServerStatusUpdateResponse)
	err := c.cc.Invoke(ctx, Matchmaker_UpdateServerStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakerClient) AdminGetSystemStatus(ctx context.Context, in *AdminRequest, opts ...grpc.CallOption) (*SystemStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemStatusResponse)
	err := c.cc.Invoke(ctx, Matchmaker_AdminGetSystemStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakerClient) AdminUpdateServerState(ctx context.Context, in *AdminServerUpdateRequest, opts ...grpc.CallOption) (*AdminUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminUpdateResponse)
	err := c.cc.Invoke(ctx, Matchmaker_AdminUpdateServerState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchmakerServer is the server API for Matchmaker service.
// All implementations must embed UnimplementedMatchmakerServer
// for forward compatibility.
type MatchmakerServer interface {
	// Un jugador solicita unirse a la cola de emparejamiento.
	QueuePlayer(context.Context, *QueuePlayerRequest) (*QueuePlayerResponse, error)
	// Un jugador solicita su estado actual (IDLE, IN_QUEUE, IN_MATCH).
	GetPlayerStatus(context.Context, *PlayerStatusRequest) (*PlayerStatusResponse, error)
	// Un jugador se suscribe para recibir notificaciones cuando se le asigne una partida.
	StreamMatchNotifications(*PlayerIdRequest, grpc.ServerStreamingServer[MatchNotification]) error
	// MÉTODOS PARA SERVIDORES DE PARTIDA (Game Servers)
	// Un servidor de partida se registra o actualiza su estado (DISPONIBLE, OCUPADO).
	UpdateServerStatus(context.Context, *ServerStatusUpdateRequest) (*ServerStatusUpdateResponse, error)
	// MÉTODOS PARA EL CLIENTE ADMINISTRADOR (Admin Client)
	// Un administrador solicita una vista completa del estado del sistema.
	AdminGetSystemStatus(context.Context, *AdminRequest) (*SystemStatusResponse, error)
	// Un administrador fuerza el estado de un servidor (ej: para recuperarlo de un estado CAIDO).
	AdminUpdateServerState(context.Context, *AdminServerUpdateRequest) (*AdminUpdateResponse, error)
	mustEmbedUnimplementedMatchmakerServer()
}

// UnimplementedMatchmakerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMatchmakerServer struct{}

func (UnimplementedMatchmakerServer) QueuePlayer(context.Context, *QueuePlayerRequest) (*QueuePlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueuePlayer not implemented")
}
func (UnimplementedMatchmakerServer) GetPlayerStatus(context.Context, *PlayerStatusRequest) (*PlayerStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerStatus not implemented")
}
func (UnimplementedMatchmakerServer) StreamMatchNotifications(*PlayerIdRequest, grpc.ServerStreamingServer[MatchNotification]) error {
	return status.Errorf(codes.Unimplemented, "method StreamMatchNotifications not implemented")
}
func (UnimplementedMatchmakerServer) UpdateServerStatus(context.Context, *ServerStatusUpdateRequest) (*ServerStatusUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServerStatus not implemented")
}
func (UnimplementedMatchmakerServer) AdminGetSystemStatus(context.Context, *AdminRequest) (*SystemStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetSystemStatus not implemented")
}
func (UnimplementedMatchmakerServer) AdminUpdateServerState(context.Context, *AdminServerUpdateRequest) (*AdminUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateServerState not implemented")
}
func (UnimplementedMatchmakerServer) mustEmbedUnimplementedMatchmakerServer() {}
func (UnimplementedMatchmakerServer) testEmbeddedByValue()                    {}

// UnsafeMatchmakerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchmakerServer will
// result in compilation errors.
type UnsafeMatchmakerServer interface {
	mustEmbedUnimplementedMatchmakerServer()
}

func RegisterMatchmakerServer(s grpc.ServiceRegistrar, srv MatchmakerServer) {
	// If the following call pancis, it indicates UnimplementedMatchmakerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Matchmaker_ServiceDesc, srv)
}

func _Matchmaker_QueuePlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueuePlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakerServer).QueuePlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Matchmaker_QueuePlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakerServer).QueuePlayer(ctx, req.(*QueuePlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Matchmaker_GetPlayerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakerServer).GetPlayerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Matchmaker_GetPlayerStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakerServer).GetPlayerStatus(ctx, req.(*PlayerStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Matchmaker_StreamMatchNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PlayerIdRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MatchmakerServer).StreamMatchNotifications(m, &grpc.GenericServerStream[PlayerIdRequest, MatchNotification]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Matchmaker_StreamMatchNotificationsServer = grpc.ServerStreamingServer[MatchNotification]

func _Matchmaker_UpdateServerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerStatusUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakerServer).UpdateServerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Matchmaker_UpdateServerStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakerServer).UpdateServerStatus(ctx, req.(*ServerStatusUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Matchmaker_AdminGetSystemStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakerServer).AdminGetSystemStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Matchmaker_AdminGetSystemStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakerServer).AdminGetSystemStatus(ctx, req.(*AdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Matchmaker_AdminUpdateServerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminServerUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakerServer).AdminUpdateServerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Matchmaker_AdminUpdateServerState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakerServer).AdminUpdateServerState(ctx, req.(*AdminServerUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Matchmaker_ServiceDesc is the grpc.ServiceDesc for Matchmaker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Matchmaker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "matchmaking.Matchmaker",
	HandlerType: (*MatchmakerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueuePlayer",
			Handler:    _Matchmaker_QueuePlayer_Handler,
		},
		{
			MethodName: "GetPlayerStatus",
			Handler:    _Matchmaker_GetPlayerStatus_Handler,
		},
		{
			MethodName: "UpdateServerStatus",
			Handler:    _Matchmaker_UpdateServerStatus_Handler,
		},
		{
			MethodName: "AdminGetSystemStatus",
			Handler:    _Matchmaker_AdminGetSystemStatus_Handler,
		},
		{
			MethodName: "AdminUpdateServerState",
			Handler:    _Matchmaker_AdminUpdateServerState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMatchNotifications",
			Handler:       _Matchmaker_StreamMatchNotifications_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "matchmaking.proto",
}

const (
	GameServer_AssignMatch_FullMethodName = "/matchmaking.GameServer/AssignMatch"
)

// GameServerClient is the client API for GameServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Servicio expuesto por cada Servidor de Partida (GameServer).
type GameServerClient interface {
	// El Matchmaker llama a este método para ordenar a un servidor que inicie una partida.
	AssignMatch(ctx context.Context, in *AssignMatchRequest, opts ...grpc.CallOption) (*AssignMatchResponse, error)
}

type gameServerClient struct {
	cc grpc.ClientConnInterface
}

func NewGameServerClient(cc grpc.ClientConnInterface) GameServerClient {
	return &gameServerClient{cc}
}

func (c *gameServerClient) AssignMatch(ctx context.Context, in *AssignMatchRequest, opts ...grpc.CallOption) (*AssignMatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignMatchResponse)
	err := c.cc.Invoke(ctx, GameServer_AssignMatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServerServer is the server API for GameServer service.
// All implementations must embed UnimplementedGameServerServer
// for forward compatibility.
//
// Servicio expuesto por cada Servidor de Partida (GameServer).
type GameServerServer interface {
	// El Matchmaker llama a este método para ordenar a un servidor que inicie una partida.
	AssignMatch(context.Context, *AssignMatchRequest) (*AssignMatchResponse, error)
	mustEmbedUnimplementedGameServerServer()
}

// UnimplementedGameServerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGameServerServer struct{}

func (UnimplementedGameServerServer) AssignMatch(context.Context, *AssignMatchRequest) (*AssignMatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignMatch not implemented")
}
func (UnimplementedGameServerServer) mustEmbedUnimplementedGameServerServer() {}
func (UnimplementedGameServerServer) testEmbeddedByValue()                    {}

// UnsafeGameServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServerServer will
// result in compilation errors.
type UnsafeGameServerServer interface {
	mustEmbedUnimplementedGameServerServer()
}

func RegisterGameServerServer(s grpc.ServiceRegistrar, srv GameServerServer) {
	// If the following call pancis, it indicates UnimplementedGameServerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GameServer_ServiceDesc, srv)
}

func _GameServer_AssignMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerServer).AssignMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameServer_AssignMatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerServer).AssignMatch(ctx, req.(*AssignMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameServer_ServiceDesc is the grpc.ServiceDesc for GameServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "matchmaking.GameServer",
	HandlerType: (*GameServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignMatch",
			Handler:    _GameServer_AssignMatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "matchmaking.proto",
}
